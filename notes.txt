## things to try

* two-level hash table: real hash and real hash
* two-level hash table: size and real hash
* two hash tables: cuckoo hashing
* check first two characters
* check length
* move string data out of line
* early exit if not 'a'..'z'
* try different table sizes for icrc32

## gperf (stock) vs gperf --compare-lengths

It looks like the extra length compare is harder to predict on my 5950X:
commit c2234da296f64226ca20ab30a2d09e785ac26375:

    $ perf stat ./build/benchmark-lite ./build/gperf_.so
    2,478,423,899      branches                  #    1.317 G/sec                    (83.42%)
      153,247,153      branch-misses             #    6.18% of all branches          (83.32%)

    $ perf stat ./build/benchmark-lite ./build/gperf--compare-lengths.so
    2,501,667,618      branches                  #    1.076 G/sec                    (83.35%)
      230,131,503      branch-misses             #    9.20% of all branches          (83.39%)

## gperf (stock) vs gperf --pic

It looks like o>=0 check is harder to predict on my 5950X (but less difficult
than the length check):
commit c2234da296f64226ca20ab30a2d09e785ac26375:

    $ perf stat ./build/benchmark-lite ./build/gperf_.so
    2,478,423,899      branches                  #    1.317 G/sec                    (83.42%)
      153,247,153      branch-misses             #    6.18% of all branches          (83.32%)

    $ perf stat ./build/benchmark-lite ./build/gperf--pic.so
    2,693,627,001      branches                  #    1.081 G/sec                    (83.38%)
      237,105,877      branch-misses             #    8.80% of all branches          (83.38%)

## gperf vs my hashing algorithms

keywords:
    gperf performs better than any of my hashing algorithm with --string-compare=memcmp.
    With --string-compare=check1memcmp, gperf is competitive with icrc32. (Other hash functions untested.)

nonkeywords:
    gperf is bimodal:
      fast (~ 95 us): (default), inline strings
      slow (~140 us): --pic, --compare-lengths
    gperf performs better than any of my hashing algorithm with --string-compare=memcmp.
    icrc32 with --string-compare=check1memcmp (~69 us) outperforms gperf (~95 us). (Other hash functions untested.)
    frozen::unordered_map with lehmer128 (4 character selection) performs well (~85 us).

mixed:
    gperf: inline strings performs best (~184 us), slightly ahead of default (~188 us)
    gperf performs better than any of my hashing algorithm with --string-compare=memcmp.
    icrc32 with --string-compare=check1memcmp (~152 us) outperforms gperf (~188 us). (Other hash functions untested.)
    frozen::unordered_map with lehmer128 (4 character selection) (~209 us) performs competitively with icrc32 --string-compare=memcmp (~207 us).
